headings <- str_subset(headings, "^[:alnum:]")
head(headings)
headings_nodes <- html_nodes(url_parsed, xpath = '//*[(@id = "main-content")]//*[contains(concat( " ", @class, " " ), concat( " ", "text-align-inherit", " " ))]')
headings <- html_text(headings_nodes)
headings <- str_subset(headings, "^[:alnum:]")
head(headings)
length(headings)
source("packages.r")
# load RSelenium
library(RSelenium)
# install current version of Java SE Runtime Environment
browseURL("http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html")
# initiate Selenium driver
rD <- rsDriver()
# initiate Selenium driver
rD <- rsDriver()
# start browser, navigate to page
url <- "http://www.iea.org/policiesandmeasures/renewableenergy/"
remDr$navigate(url)
remDr <- rD[["client"]]
# start browser, navigate to page
url <- "http://www.iea.org/policiesandmeasures/renewableenergy/"
remDr$navigate(url)
# open regions menu
xpath <- '//*[@id="main"]/div/form/div[1]/ul/li[1]/span'
regionsElem <- remDr$findElement(using = 'xpath', value = xpath)
regionsElem$clickElement() # click on button
# selection "European Union"
xpath <- '//*[@id="main"]/div/form/div[1]/ul/li[1]/ul/li[5]/label'
euElem <- remDr$findElement(using = 'xpath', value = xpath)
euElem$clickElement() # click on button
# set time frame
xpath <- '//*[@id="main"]/div/form/div[5]/select[1]'
fromDrop <- remDr$findElement(using = 'xpath', value = xpath)
clickFrom <- fromDrop$clickElement() # click on drop-down menu
writeFrom <- fromDrop$sendKeysToElement(list("2000")) # enter start year
xpath <- '//*[@id="main"]/div/form/div[5]/select[2]'
toDrop <- remDr$findElement(using = 'xpath', value = xpath)
clickTo <- toDrop$clickElement() # click on drop-down menu
writeTo <- toDrop$sendKeysToElement(list("2010")) # enter end year
# click on search button
xpath <- '//*[@id="main"]/div/form/button[2]'
searchElem <- remDr$findElement(using = 'xpath', value = xpath)
resultsPage <- searchElem$clickElement() # click on button
# store index page
output <- remDr$getPageSource(header = TRUE)
write(output[[1]], file = "iea-renewables.html")
# close connection
remDr$closeServer()
# parse index table
content <- read_html("iea-renewables.html", encoding = "utf8")
tabs <- html_table(content, fill = TRUE)
tab <- tabs[[1]]
# add names
names(tab) <- c("title", "country", "year", "status", "type", "target")
head(tab)
source("packages.r")
# ipapi package
#devtools::install_github("hrbrmstr/ipapi")
library(ipapi)
# function call
ip_df <- geolocate(c(NA, "", "10.0.1.1", "72.33.67.89", "www.nytimes.com", "search.twitter.com"), .progress = TRUE)
View(ip_df)
# overview
browseURL("https://cran.r-project.org/web/packages/rtimes/vignettes/rtimes_vignette.html")
load("/Users/simonmunzert/Munzert Dropbox/Simon Munzert/rkeys.RDa")
Sys.setenv(NYTIMES_AS_KEY = nytimes_apikey)
terms <- c("John McCain", "Nancy Pelosi", "Bernie Sanders", "Al Franken", "Marco Rubio", "Paul Ryan", "Elizabeth Warren", "Mitch McConnell", "Tim Kaine", "Dianne Feinstein")
## peparations -------------------
source("packages.r")
## name assigned to created app
appname <- "TwitterToR" # <--- add your Twitter App name here!
## api key (example below is not a real key)
load("/Users/simonmunzert/rkeys.RDa") # <--- adapt path here; see above!
## register app
twitter_token <- create_token(
app = appname,
consumer_key = TwitterToR_twitterkey,
consumer_secret = TwitterToR_twittersecret,
access_token = TwitterToR_accesstoken,
access_secret = TwitterToR_accesssecret,
set_renv = FALSE)
load("/Users/simonmunzert/twitter_token.rds") # <--- adapt path here; see above!
TwitterToR_twitterkey <- "uBoA6wJPiWXrcuTWUFbaTIApT"  # <--- add your Twitter key here!
TwitterToR_twittersecret <- "myhHWBOP3bPzd4oa38I9H5SesmAuUp4YZzgv97DtDxi4nlYlQM" # <--- add your Twitter secret here!
TwitterToR_accesstoken <- "124133966-6Nd4d3fcemYA4nb2qcXJWvOJZlAij8UAoV9GJCtD"  # <--- add your Twitter access token here!
TwitterToR_accesssecret <- "01GNhWMjwVIkaHEEkhQIxIoZQDLQXLe23cgpPV2FOmFjE" # <--- add your Twitter secret here!
TwitterToR_twitterkey <- "uBoA6wJPiWXrcuTWUFbaTIApT"  # <--- add your Twitter key here!
TwitterToR_twittersecret <- "myhHWBOP3bPzd4oa38I9H5SesmAuUp4YZzgv97DtDxi4nlYlQM" # <--- add your Twitter secret here!
TwitterToR_accesstoken <- "124133966-6Nd4d3fcemYA4nb2qcXJWvOJZlAij8UAoV9GJCtD"  # <--- add your Twitter access token here!
TwitterToR_accesssecret <- "01GNhWMjwVIkaHEEkhQIxIoZQDLQXLe23cgpPV2FOmFjE" # <--- add your Twitter secret here!
save(TwitterToR_twitterkey,
TwitterToR_twittersecret,
TwitterToR_accesstoken,
TwitterToR_accesssecret,
file = paste0(normalizePath("~/"),"/rkeys2.RDa")) # <--- this is where your keys are locally stored!
source("packages.r")
## api key (example below is not a real key)
load("/Users/simonmunzert/rkeys2.RDa") # <--- adapt path here; see above!
TwitterToR_twitterkey <- "uBoA6wJPiWXrcuTWUFbaTIApT"  # <--- add your Twitter key here!
TwitterToR_twittersecret <- "myhHWBOP3bPzd4oa38I9H5SesmAuUp4YZzgv97DtDxi4nlYlQM" # <--- add your Twitter secret here!
TwitterToR_accesstoken <- "124133966-6Nd4d3fcemYA4nb2qcXJWvOJZlAij8UAoV9GJCtD"  # <--- add your Twitter access token here!
TwitterToR_accesssecret <- "01GNhWMjwVIkaHEEkhQIxIoZQDLQXLe23cgpPV2FOmFjE" # <--- add your Twitter secret here!
save(TwitterToR_twitterkey,
TwitterToR_twittersecret,
TwitterToR_accesstoken,
TwitterToR_accesssecret,
file = paste0(normalizePath("~/"),"/twitterkeys.RDa")) # <--- this is where your keys are locally stored!
## name assigned to created app
appname <- "TwitterToR" # <--- add your Twitter App name here!
## register app
twitter_token <- create_token(
app = appname,
consumer_key = TwitterToR_twitterkey,
consumer_secret = TwitterToR_twittersecret,
access_token = TwitterToR_accesstoken,
access_secret = TwitterToR_accesssecret,
set_renv = FALSE)
## check if everything worked
rt <- search_tweets("merkel", n = 200, token = twitter_token)
View(rt)
source("packages.r")
# inspect form
session <- html_session("http://www.google.com")
url_parsed <- read_html("http://www.google.com")
search <- html_form(session)[[1]]
search
# set form parameters
form <- set_values(search, q = "kneipen kreuzberg")
# submit form
google_search <- submit_form(session, form)
# retrieve results
url_parsed <- read_html(google_search)
hits_text <- html_nodes(url_parsed, xpath = "//*[@class='r']//a") %>% html_text()
hits_links <- html_nodes(url_parsed, xpath = "//*[@class='r']//a") %>% html_attr("href")
hits_text
hits_links
## another example: WordNet Search
# inspect webpage
url <- "http://wordnetweb.princeton.edu/perl/webwn"
browseURL(url)
url_parsed <- read_html(url)
html_form(url_parsed)
wordnet <- html_form(url_parsed)[[1]]
wordnet
# test it online with "data"; alternative approach using html_session()
browseURL("http://www.whoishostingthis.com/tools/user-agent/")
session <- html_session(url, user_agent(uastring))
uastring <- "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
session <- html_session(url, user_agent(uastring))
wordnet_form <- set_values(wordnet, s = "data")
wordnet_search <- submit_form(session, wordnet_form)
url_parsed <- read_html(wordnet_search)
url_parsed %>% html_nodes(xpath = "//li") %>% html_text()
session <- html_session(url, user_agent(uastring))
wordnet_form <- set_values(wordnet, s = "data", o2 = "1")
wordnet_search <- submit_form(session, wordnet_form)
url_parsed <- read_html(wordnet_search)
url_parsed %>% html_nodes(xpath = "//li") %>% html_text()
## POST forms
# goal: gathering data from read-able at http://read-able.com/
url <- "http://read-able.com/"
browseURL(url)
url_parsed <- read_html(url)
html_form(url_parsed)
readable <- html_form(url_parsed)[[2]]
sentence <- '"It is a capital mistake to theorize before one has data. Insensibly one begins to twist facts to suit theories, instead of theories to suit facts." - Arthur Conan Doyle, Sherlock Holmes'
readable_form <- set_values(readable, directInput = sentence)
session <- html_session(url, user_agent(uastring))
readable_search <- submit_form(session, readable_form)
url_parsed <- read_html(readable_search)
html_table(url_parsed)
source("packages.r")
# example
raw.data <- "555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5553642Dr. Julius Hibbert"
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name
str_extract_all(raw.data, "[[:alpha:]., ]{2,}")
unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
phone <- unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}"))
phone
data.frame(name = name, phone = phone)
# running example
example.obj <- "1. A small sentence. - 2. Another tiny sentence."
# self match
str_extract(example.obj, "small")
# self match
str_extract(example.obj, "llams")
str_extract(example.obj, "banana")
str_extract(example.obj, "e")
str_extract_all(example.obj, "e")
# multiple matches
(out <- str_extract_all(c("text", "manipulation", "basics"), "a"))
# case sensitivity
str_extract(example.obj, "small")
str_extract(example.obj, "SMALL")
str_extract(example.obj, regex("SMALL", ignore_case = TRUE))
# match empty space
str_extract(example.obj, "mall sent")
# match the beginning of a string
str_extract(example.obj, "^1")
str_extract(example.obj, "^2")
# match the end of a string
str_extract(example.obj, "sentence$")
str_extract(example.obj, "sentence.$")
# pipe operator
unlist(str_extract_all(example.obj, "tiny|sentence"))
# wildcard
str_extract(example.obj, "sm.ll")
# character class
str_extract(example.obj, "sm[abc]ll")
# character class: range
str_extract(example.obj, "sm[a-p]ll")
# character class: additional characters
unlist(str_extract_all(example.obj, "[uvw. ]"))
# pre-defined character classes
unlist(str_extract_all(example.obj, "[:punct:]"))
unlist(str_extract_all(example.obj, "[[:punct:]ABC]"))
unlist(str_extract_all(example.obj, "[^[:alnum:]]"))
# additional shortcuts
unlist(str_extract_all(example.obj, "\\w+"))
# word edges
unlist(str_extract_all(example.obj, "e\\b"))
unlist(str_extract_all(example.obj, "e\\B"))
# quantifier
str_extract(example.obj, "s[:alpha:][:alpha:][:alpha:]l")
str_extract(example.obj, "s[:alpha:]{3}l")
str_extract(example.obj, "s[:alpha:]{4}l")
str_extract(example.obj, "s[:alpha:]{1,}l")
str_extract(example.obj, "A.+sentence")
# greedy quantification
str_extract(example.obj, "A.+sentence")
str_extract(example.obj, "A.+?sentence")
str_extract_all(example.obj, "A.+?sentence")
str_extract_all(example.obj, "A.+sentence")
# quantifier with pattern sequence
unlist(str_extract_all(example.obj, "(.en){1,5}"))
# quantifier with pattern sequence
unlist(str_extract_all(example.obj, "(.en){1,9}"))
unlist(str_extract_all(example.obj, ".en{1,5}"))
# quantifier with pattern sequence
unlist(str_extract_all(example.obj, "(.en){1,1}"))
# quantifier with pattern sequence
unlist(str_extract_all(example.obj, "(.en){3,5}"))
# quantifier with pattern sequence
unlist(str_extract_all(example.obj, "(.en){2,5}"))
# quantifier with pattern sequence
unlist(str_extract_all(example.obj, "(.en){3,5}"))
# meta characters
unlist(str_extract_all(example.obj, "\\."))
unlist(str_extract_all(example.obj, fixed(".")))
# meta characters in character classes
unlist(str_extract_all(example.obj, "[1-3]"))
unlist(str_extract_all(example.obj, "[13-]"))
# backreferencing
str_extract(example.obj, "([:alpha:]).+?\\1")
str_extract(example.obj, "(\\b[a-z]+\\b).+?\\1")
# assertions
unlist(str_extract_all(example.obj, "(?<=2. ).+")) # positive lookbehind: (?<=...)
unlist(str_extract_all(example.obj, ".+(?=2)")) # positive lookahead (?=...)
unlist(str_extract_all(example.obj, "(?<!Blah )tiny.+")) # negative lookbehind: (?<!...)
phone <- unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}"))
phone
# do you think you can master regular expressions now?
browseURL("http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address/201378#201378") # think again
example.obj
# locate
str_locate(example.obj, "tiny")
# substring extraction
str_sub(example.obj, start = 35, end = 38)
# replacement
str_sub(example.obj, 35, 38) <- "huge"
example.obj
str_replace(example.obj, pattern = "huge", replacement = "giant")
str_split(example.obj, "-")
# manipulate multiple elements; example
(char.vec <- c("this", "and this", "and that"))
# detection
str_detect(char.vec, "this")
# keep strings matching a pattern
str_subset(char.vec, "this") # wrapper around x[str_detect(x, pattern)]
# counting
str_count(char.vec, "a")
str_count(char.vec, "\\w+")
str_length(char.vec)
example.obj
stri_count_words(example.obj)
stri_stats_latex(example.obj)
stri_stats_general(example.obj)
stri_escape_unicode("\u00b5")
stri_unescape_unicode("\u00b5")
stri_rand_lipsum(3)
stri_rand_shuffle("hello")
stri_rand_strings(100, 10, pattern = "[washington]")
## 1. describe the types of strings that conform to the following regular expressions and construct an example that is matched by the regular expression.
str_extract_all("Phone 150$, PC 690$", "[0-9]+\\$") # example
str_extract("The smallest cities are the best", "\\b[a-z]{1,4}\\b")
str_extract_all("The smallest cities are the best", "\\b[a-z]{1,4}\\b")
str_extract_all("course.txt", ".*?\\.txt$")
str_extract_all(c("course.txt", "log.txt", ".txt", "word.docx"), ".*?\\.txt$")
str_extract_all(c("course.txt", "log.txt", ".txt", "word.docx", "file1.txt, file2.txt"), ".*?\\.txt$")
str_extract_all(c("course.txt", "log.txt", ".txt", "word.docx", "file1.txt and some other file2.txt), ".*?\\.txt$")
str_extract_all(c("course.txt", "log.txt", ".txt", "word.docx", "file1.txt and some other file2.txt"), ".*?\\.txt$")
str_extract_all(c("course.txt", "log.txt", ".txt", "word.docx", "file1.txt and some other file2.txt"), ".*\\.txt$")
str_extract_all(c("course.txt", "log.txt", ".txt", "word.docx", "file1.txt and some other file2.txt"), "file.*?\\.txt$")
str_extract_all(c("course.txt", "log.txt", ".txt", "word.docx", "file1.txt and some other file2.txt"), "file.*?\\.txt")
str_extract_all(c("course.txt", "log.txt", "hello_txt.txt"), ".*?\\.txt$")
str_extract_all(c("course.txt", "log.txt", "log..txt"), ".*?\\.txt$")
str_extract_all("12/01/2019 to 12/01/19", "\\d{2}/\\d{2}/\\d{2,4}")
str_extract_all("<xy>hello</xy>","<(.+?)>.+?</\\1>")
str_extract_all("<li>hello</li>","<(.+?)>.+?</\\1>")
str_extract_all("log.txt, example.html, bla.txt2", ".*?\\.txt$")
str_extract_all("log.txt, example.html, bla.txt2", ".*?\\.txt$")
str_extract_all(c("log.txt", "example.html", "bla.txt2"), ".*?\\.txt$")
str_extract_all("log.txt, example.html, bla.txt2", ".*?\\.txt$")
?str_replace
source("packages.r")
# parse with read_html
parsed_doc <- read_html("https://www.facebook.com")
parsed_doc
# inspect parsed object
class(parsed_doc)
html_structure(parsed_doc)
as_list(parsed_doc)
# import running example
parsed_doc <- read_html("http://www.r-datacollection.com/materials/ch-4-xpath/fortunes/fortunes.html")
parsed_doc
# absolute paths
html_nodes(parsed_doc, xpath = "/html/body/div/p/i")
# relative paths
html_nodes(parsed_doc, xpath = "//body//p/i")
html_nodes(parsed_doc, xpath = "//p/i")
html_nodes(parsed_doc, xpath = "//i")
# wildcard (for ONE node)
html_nodes(parsed_doc, xpath = "/html/body/div/*/i")
html_nodes(parsed_doc, xpath = "/html/body/*/i") # does not work
# ancestor
html_nodes(parsed_doc, xpath = "//a/ancestor::div")
html_nodes(parsed_doc, xpath = "//a/ancestor::div//i")
# ancestor
html_nodes(parsed_doc, xpath = "//a/ancestor::div")
# sibling
html_nodes(parsed_doc, xpath = "//p/preceding-sibling::h1")
# Parent
html_nodes(parsed_doc, xpath = "//title/parent::*")
# numeric
html_nodes(parsed_doc, xpath = "//div/p[1]")
html_nodes(parsed_doc, xpath =  "//div/p[last()]")
html_nodes(parsed_doc, xpath = "//div[count(.//a)>0]")
html_nodes(parsed_doc, xpath = "//div[count(./@*)>2]")
html_nodes(parsed_doc, xpath = "//*[string-length(text())>50]")
# text-based
html_nodes(parsed_doc, xpath = "//div[@date='October/2011']")
html_nodes(parsed_doc, xpath = "//*[contains(text(), 'magic')]")
html_nodes(parsed_doc, xpath = "//div[substring-after(./@date, '/')='2003']//i")
html_nodes(parsed_doc, xpath = "//title")
# values
html_nodes(parsed_doc, xpath = "//title") %>% html_text()
# values
html_nodes(parsed_doc, xpath = "//title") %>% html_text()
# attributes
html_nodes(parsed_doc, xpath = "//div") %>% html_attrs() # all attributes
html_nodes(parsed_doc, xpath = "//div") %>% html_attr("lang") # single attribute
source("packages.r")
# 1. specify URL
url <- "https://en.wikipedia.org/wiki/List_of_tallest_buildings_in_Germany"
browseURL(url)
# 3. extract specific nodes with XPath
nodes <- html_nodes(url_parsed, xpath = '//td[2]/a')
# 2. download static HTML behind the URL and parse it
url_parsed <- read_html(url)
# 3. extract specific nodes with XPath
nodes <- html_nodes(url_parsed, xpath = '//td[2]/a')
nodes
# 4. extract content from nodes
article_links <- html_text(nodes)
article_links
# 3. extract specific nodes with XPath
nodes <- html_nodes(url_parsed, xpath = '//td[2]')
# 4. extract content from nodes
article_links <- html_text(nodes)
article_links
head(article_links)
length(article_links)
## scraping HTML tables with rvest
url_p <- read_html("https://en.wikipedia.org/wiki/List_of_MPs_elected_in_the_United_Kingdom_general_election,_1992")
## scraping HTML tables with rvest
url_p <- read_html("https://en.wikipedia.org/wiki/List_of_MPs_elected_in_the_United_Kingdom_general_election,_1992")
tables <- html_table(url_p, header = TRUE, fill = TRUE)
mps <- tables[[4]]
head(mps)
View(mps)
names(mps) <- c("constituency", "mp", "party")
mps <- mps[2:nrow(mps),]
head(mps)
mps <- filter(mps, !str_detect(constituency, fixed("[edit]")))
head(mps)
nrow(mps)
table(mps$party, str_detect(mps$mp, "^Sir ")) # how many "Sirs" per party?
str_detect(mps$mp, "^Sir ")
mps$sir <- str_detect(mps$mp, "^Sir ")
View(mps)
table(mps$party, str_detect(mps$mp, "^Sir ")) # how many "Sirs" per party?
# to install it, visit
browseURL("http://selectorgadget.com/")
url <- "https://www.washingtonpost.com"
browseURL(url)
url_parsed <- read_html(url)
xpath <- '//*[contains(concat( " ", @class, " " ), concat( " ", "text-align-inherit", " " ))]'
headings_nodes <- html_nodes(url_parsed, xpath = xpath)
headings <- html_text(headings_nodes)
headings
url <- "http://www.spiegel.de/schlagzeilen/"
xpath <- '//*[contains(concat( " ", @class, " " ), concat( " ", "schlagzeilen-headline", " " ))]'
headings <- html_text(headings_nodes)
url <- "http://www.spiegel.de/schlagzeilen/"
url_parsed <- read_html(url)
xpath <- '//*[contains(concat( " ", @class, " " ), concat( " ", "schlagzeilen-headline", " " ))]'
headings_nodes <- html_nodes(url_parsed, xpath = xpath)
headings <- html_text(headings_nodes)
headings
xpath <- '//*[contains(concat( " ", @class, " " ), concat( " ", "text-align-inherit", " " ))]'
url <- "https://www.washingtonpost.com"
url_parsed <- read_html(url)
xpath <- '//*[contains(concat( " ", @class, " " ), concat( " ", "text-align-inherit", " " ))]'
headings_nodes <- html_nodes(url_parsed, xpath = xpath)
headings <- html_text(headings_nodes)
headings <- str_subset(headings, "^[:alnum:]")
head(headings)
?html_nodes
# 1. go to the following website
browseURL("https://www.jstatsoft.org/about/editorialTeam")
url <- "https://www.jstatsoft.org/about/editorialTeam"
url_parsed <- read_html(url)
html_nodes(url_parsed, xpath = "//div[@class = 'member']//a") %>% html_text()
affiliations <- html_nodes(url_parsed, xpath = "//div[@class = 'member']/li") %>% html_text()
affiliations
str_detect(affiliations, "tatisti|athemati") %>% table
# set temporary working directory
tempwd <- ("../data/jstatsoftStats")
dir.create(tempwd)
setwd(tempwd)
browseURL("http://www.jstatsoft.org/")
# construct list of urls
baseurl <- "http://www.jstatsoft.org/article/view/v"
seq(1,88,1)
paste0("0", seq(1,88,1))
volurl <- paste0("0", seq(1,88,1))
volurl[1:9] <- paste0("00", seq(1, 9, 1))
paste("hello", "world")
paste0("hello", "world")
issurl <- paste0("0", seq(1,9,1))
issurl
urls_list <- paste0(baseurl, volurl)
urls_list
urls_list <- paste0(rep(urls_list, each = 9), "i", issurl)
urls_list
88*0
88*9
names <- paste0(rep(volurl, each = 9), "_", issurl, ".html")
names <- paste0(rep(volurl, each = 9), "_", issurl, ".html")
names
# download pages
folder <- "html_articles/"
dir.create(folder)
# download pages
folder <- "html_articles/"
dir.create(folder)
for (i in 1:length(urls_list)) {
if (!file.exists(paste0(folder, names[i]))) {
download.file(urls_list[i], destfile = paste0(folder, names[i])) # , method = "libcurl" might be needed on windows machine
Sys.sleep(runif(1, 0, 1))
}
}
# check success
list_files <- list.files(folder, pattern = "0.*")
list_files
list_files_path <-  list.files(folder, pattern = "0.*", full.names = TRUE)
list_files_path
length(list_files)
# delete non-existing articles
files_size <- sapply(list_files_path, file.size)
table(files_size) %>% sort()
delete_files <- list_files_path[files_size == 23097]
sapply(delete_files, file.remove)
list_files_path <-  list.files(folder, pattern = "0.*", full.names = TRUE) # update list of files
# import pages and extract content
authors <- character()
title <- character()
statistics <- character()
numViews <- numeric()
datePublish <- character()
for (i in 1:length(list_files_path)) {
html_out <- read_html(list_files_path[i])
table_out <- html_table(html_out, fill = TRUE)[[6]]
authors[i] <- table_out[1,2]
title[i] <- table_out[2,2]
statistics[i] <- table_out[4,2]
numViews[i] <- statistics[i] %>% str_extract("[[:digit:]]+") %>% as.numeric()
datePublish[i] <- statistics[i] %>% str_extract("[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}.$") %>% str_replace("\\.", "")
}
# construct data frame
dat <- data.frame(authors = authors, title = title, numViews = numViews, datePublish = datePublish, stringsAsFactors = FALSE)
View(dat)
dat <- filter(dat, !is.na(numViews))
# plot download statistics
dattop <- dat[order(dat$numViews, decreasing = TRUE),]
dattop[1:10,]
dattop[1:10,]
summary(dat$numViews)
plot(density(dat$numViews, from = 0), yaxt="n", ylab="", xlab="Number of views", main="Distribution of article page views in JStatSoft")
plot(density(dat$numViews, from = 0), yaxt="n", ylab="", xlab="Number of views", main="Distribution of article page views in JStatSoft")
